// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/21/2018 14:25:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg SEL;
reg SEL1;
reg SEL2;
reg [3:0] X;
reg [3:0] Y;
// wires                                               
wire Cout;
wire [3:0] out;
wire OVF;

// assign statements (if any)                          
CO i1 (
// port map - connection between master ports and signals/registers   
	.Cin(Cin),
	.Cout(Cout),
	.out(out),
	.OVF(OVF),
	.SEL(SEL),
	.SEL1(SEL1),
	.SEL2(SEL2),
	.X(X),
	.Y(Y)
);
initial 
begin 
#10000000 $finish;
end 
// X[ 3 ]
always
begin
	X[3] = 1'b0;
	X[3] = #156250 1'b1;
	#156250;
end 
// X[ 2 ]
always
begin
	X[2] = 1'b0;
	X[2] = #156250 1'b1;
	#156250;
end 
// X[ 1 ]
always
begin
	X[1] = 1'b0;
	X[1] = #156250 1'b1;
	#156250;
end 
// X[ 0 ]
always
begin
	X[0] = 1'b0;
	X[0] = #156250 1'b1;
	#156250;
end 
// Y[ 3 ]
always
begin
	Y[3] = 1'b0;
	Y[3] = #312500 1'b1;
	#312500;
end 
// Y[ 2 ]
always
begin
	Y[2] = 1'b0;
	Y[2] = #312500 1'b1;
	#312500;
end 
// Y[ 1 ]
always
begin
	Y[1] = 1'b0;
	Y[1] = #312500 1'b1;
	#312500;
end 
// Y[ 0 ]
always
begin
	Y[0] = 1'b0;
	Y[0] = #312500 1'b1;
	#312500;
end 

// Cin
always
begin
	Cin = 1'b0;
	Cin = #625000 1'b1;
	#625000;
end 

// SEL
always
begin
	SEL = 1'b0;
	SEL = #1250000 1'b1;
	#1250000;
end 

// SEL1
always
begin
	SEL1 = 1'b0;
	SEL1 = #2500000 1'b1;
	#2500000;
end 

// SEL2
always
begin
	SEL2 = 1'b0;
	SEL2 = #5000000 1'b1;
	#5000000;
end 
endmodule

